{
  "rules": {
    "leaderboard": {
      ".read": true,
      "$uid": {
        ".write": "$uid === auth.uid",
        ".validate": "newData.hasChildren(['playerName', 'bestScore', 'totalScore', 'gamesPlayed', 'wins'])",
        "playerName": {
          ".validate": "newData.isString() && newData.val().length <= 20 && newData.val().length > 0"
        },
        "bestScore": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "totalScore": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "gamesPlayed": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "wins": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "history": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$gameId": {
          ".validate": "newData.hasChildren(['score', 'role', 'won', 'timestamp'])",
          "score": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "role": {
            ".validate": "newData.isString() && (newData.val() === 'hacker' || newData.val() === 'defender')"
          },
          "won": {
            ".validate": "newData.isBoolean()"
          },
          "timestamp": {
            ".validate": "newData.isNumber()"
          },
          "difficulty": {
            ".validate": "!newData.exists() || (newData.isString() && (newData.val() === 'easy' || newData.val() === 'normal' || newData.val() === 'hard'))"
          }
        }
      }
    },
    "gameHistory": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$gameId": {
          ".validate": "newData.hasChildren(['score', 'role', 'won', 'timestamp'])",
          "score": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "role": {
            ".validate": "newData.isString() && (newData.val() === 'hacker' || newData.val() === 'defender')"
          },
          "won": {
            ".validate": "newData.isBoolean()"
          },
          "timestamp": {
            ".validate": "newData.isNumber()"
          },
          "difficulty": {
            ".validate": "!newData.exists() || (newData.isString() && (newData.val() === 'easy' || newData.val() === 'normal' || newData.val() === 'hard'))"
          }
        }
      }
    },
    "dailyChallenges": {
      "$date": {
        ".read": true,
        "$uid": {
          ".write": "$uid === auth.uid",
          ".validate": "newData.hasChildren(['score', 'completed', 'timestamp'])",
          "score": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "completed": {
            ".validate": "newData.isBoolean()"
          },
          "timestamp": {
            ".validate": "newData.isNumber()"
          }
        }
      }
    },
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "displayName": {
          ".validate": "newData.isString() && newData.val().length <= 50"
        },
        "email": {
          ".validate": "newData.isString()"
        },
        "achievements": {
          ".validate": "newData.hasChildren(['unlocked', 'lastUpdated'])"
        },
        "achievementStats": {
          ".validate": "newData.hasChild('lastUpdated')"
        },
        "challengeStats": {
          ".validate": "newData.hasChildren(['totalCompleted', 'currentStreak'])",
          "totalCompleted": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "currentStreak": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "longestStreak": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          }
        }
      }
    }
  }
}
